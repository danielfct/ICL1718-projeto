options {
  STATIC=false;
}

PARSER_BEGIN(SimpleParser)

package parser;

public class SimpleParser {

}

PARSER_END(SimpleParser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < TRUE : "true" >
  |
  < FALSE : "false" >
  |
  < OR : "||" >
  |
  < AND : "&&" >
  |
  < EQ : "==" >
  |
  < NEQ : "!=" >
  |
  < LEQ : "<=" >
  |
  < GEQ: ">=" >
  |
  < LT : "<" >
  |
  < GT : ">" >
  |
  < NOT: "!" >
  |
  < EOL : "\n" >
  | 
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}

void Start(): // S --> D '\n'
{ }
{
   Disjunction() <EOL>
}

void Disjunction(): // D -- > C ( '||' C )*
{}
{
	Conjunction() ( <OR> Conjunction() )*
}

void Conjunction(): // C -- > B ('&&' B )*
{}
{
	BooleanExp() ( <AND> BooleanExp() )*
}

void BooleanExp(): // B -- > E ('==' E )* | '!' B
{}
{
	Exp() ( (<EQ>|<NEQ>|<LT>|<GT>|<LEQ>|<GEQ>) Exp() )*
	|
	<NOT> BooleanExp()
}

void Exp() : // E --> T  ( '+' T )*
{ }
{
   Term() ( <PLUS> Term() | <MINUS> Term() )*
}

void Term() : // T --> F ('*' F)*
{ }
{
    Fact() ( <TIMES> Fact() | <DIV> Fact() )*
}

void Fact() : // F --> '-' ( Num |  '(' E ')' ) | 'true' | 'false'
{ }
{
	[<MINUS>] 
	( 
 		<Num>
		|
   		<LPAR> Disjunction() <RPAR>
  		|
  		<Id>
  	)
	|
	<TRUE> 
	| 
	<FALSE> 
}

